/*
This file contains the Email Address Key generation and the VKD.Publish subprotocol
*/

/* ------- VKD.Publish ------- */

// XXX: we insert a single pk per leaf/per revision (rather than an SKL with multiple pks)
// XXX: aggregation into batches (instead of one epoch per key) is not modelled
rule ClientKeyGen:
    let keys_old = <                                <%rev_old, val_old>, rest >
        keys_new = < <%rev_old %+ %1, pk(~sk_new)>, <%rev_old, val_old>, rest >
    in
    [ Fr(~sk_new)
    , !St_Client(id, %rev, $email, keys_old, last_verified_rev, unverified_keys) ]
    --[
        ClientKeyGen(id, $email, pk(~sk_new))
      , UseMaxStClient(id, %rev)
      , StClientGen(id, %rev %+ %1)
    ]->
    [ !St_Client(id, %rev %+ %1, $email, keys_new, last_verified_rev, <pk(~sk_new), unverified_keys>)
    , Out(pk(~sk_new)) ]

// omit server rules adding key to tree


/* ------- Audit CT ------- */

rule Audit_CT_Equivocation[color=#eb508d]:
    [ !CT(epoch_id, chainhash_ct_1, sig_1)
    , !CT(epoch_id, chainhash_ct_2, sig_2)
    , !Pk($server, pk) ]
    --[
        Neq(chainhash_ct_1, chainhash_ct_2)
    //   , Eq(verify(sig_1, <epoch_id, chainhash_ct_1>, pk), true)
    //   , Eq(verify(sig_2, <epoch_id, chainhash_ct_2>, pk), true)
      , EquivocationInCt(epoch_id)
    ]->
    []


/* ------- Executability (sanity check) Lemmas ------- */

lemma Basic_Executability:
    exists-trace
    "Ex id label val rev roothash #i #j #k .
          ClientKeyGen(id, label, val)@i
        & Query(label)@j
        & QueryVerified(label, val, rev, roothash)@k
        & i < j
        & j < k
    "

// Check that the protocol can insert two distinct users into the same tree
lemma Executability_TwoUsers:
    exists-trace
    "Ex roothash id1 label1 val1 rev1 #i #j #k
                 id2 label2 val2 rev2 #l .
                 ClientKeyGen(id1, label1, val1)@i
        & Query(label1)@j
        & QueryVerified(label1, val1, rev1, roothash)@k
        & i < j
        & j < k
        & ClientKeyGen(id2, label2, val2)@l
        // force a nice tree structure
        & roothash = h('head', h(<label1, <rev1, val1>, 'rest'>), h(<label2, <rev2, val2>, 'rest'>), 'tail')
    "

// Check that the protocol can append to the user subtree
lemma Executability_TwoRevisions:
    exists-trace
    "Ex id label val1 rev1 roothash1 #i1 #j1 #k1
                 val2 rev2 roothash2 #i2 #j2 #k2 .
                 ClientKeyGen(id, label, val1)@i1
        & Query(label)@j1
        & QueryVerified(label, val1, rev1, roothash1)@k1
        & i1 < j1
        & j1 < k1
        & ClientKeyGen(id, label, val2)@i2
        & Query(label)@j2
        & QueryVerified(label, val2, rev2, roothash2)@k2
        & i2 < j2
        & j2 < k2
        // force a nice tree structure
        & roothash1 = h('head', h(< label,                   <%1, val1>, 'rest' >), 'tail')
        & roothash2 = h('head', h(< label, <%1 %+ %1, val2>, <%1, val1>, 'rest' >), 'tail')
        & not (val1 = val2)
    "


/* ------- Security Lemmas ------- */

// Helper needed to prove "Security_NonDiscreditabilityCT"
//
// Intuition:
// During "Security_NonDiscreditabilityCT" Tamarin searches a path where it creates many
// different servers, which then generate signatures and CT entries.
// By linking the ServerEpochSign to the InitServer, we implicitly link
// the signing back to a secret key.
// This helps Tamarin figure out that this is a dead-end:
// after all, the rule "Audit_CT_Equivocation" requires that they are signed by the same key.
// lemma Helper_LinkEpochSignToInitServer[use_induction,reuse]:
//     all-traces
//     "All id e s #i .
//         ServerEpochSign(id, e, s)@i
//     ==> (InitServer(id)@i)
//         | (Ex #j . InitServer(id)@j & j < i)
//     "

// lemma Security_NonDiscreditabilityCT:
//     all-traces
//     "All epoch_id #i . EquivocationInCt(epoch_id)@i
//         ==> Ex #j . RevealServerSk()@j & j < i
//     "
