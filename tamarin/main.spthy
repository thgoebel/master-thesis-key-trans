theory ProtonKT
begin

/*
 * Protocol:    Proton Key Transparency
 * Modeler:     Thore Goebel
 * License:     GPL-v3-or-later
 * Date:        September 2023
 *
 * Status:      WIP
 */

builtins: hashing, multiset, natural-numbers, asymmetric-encryption

/*
This model is inspired by the TreeKEM model in [CSF23].

The persistent facts prefixed by "SST_" are "Server State"
and they should only be used by server rules.

## Limitations

See the various TODOs throughout.

## References

[CSF23]: https://eprint.iacr.org/2022/1130
*/


/* ------- Initialisation Rules ------- */

// TODO: support multiple email per account as tuples of <email, keylist>
rule Init_Client:
    let keys = 'empty'
        keys_rev = %1
    in
    [ Fr(~id) ] --> [ St_Client(~id, $email, keys, keys_rev) ]

rule Register_Server_Pk:
    [ Fr(~sk) ] --> [ !Ltk($server, ~sk), !Pk($server, pk(~sk)), Out(pk(~sk)) ]

rule Reveal_Server_Sk:
    [ !Ltk(server, sk) ] --[ RevealServer() ]-> [ Out(sk) ]

// TODO: server should sign the epochs
rule Init_Server:
    let epoch_id = %1
        chainhash = 'empty'
        roothash = 'empty'
    in
    [ Fr(~id)
    , !Ltk(server, sk) ]
    --[
        InitServer()
      , IssueEpoch(epoch_id, chainhash, roothash)
    ]->
    [ St_Server(~id, sk, epoch_id, chainhash, roothash)
    , !SST_Epoch(epoch_id, chainhash, roothash) ]

rule Init_Auditor:
    let epoch_id = %1
        chainhash = 'empty'
    in
    [ Fr(~id) ] --> [ St_Auditor(~id, epoch_id, chainhash) ]


/* ------- Various Protocol Rules ------- */




/* ------- Subprotocol Rules ------- */

#include "publishepoch.spthy"
#include "query.spthy"
#include "selfaudit.spthy"


/* ------- Restrictions ------- */

restriction Eq:
    "All a b #i . Eq(a,b)@i ==> a = b"

// restriction Neq:
//     "All a b #i . Neq(a,b)@i ==> not (a = b)"

// The "not" part isn't needed, but let's make it explicit.
// restriction StrictlyGreaterThan: // x > y
//     "All x y #i . StrictlyGreaterThan(x,y)@i ==> y << x & not (x = y)"

// restriction StrictlyLessThan: // x < y
//     "All x y #i . StrictlyLessThan(x,y)@i ==> x << y & not (x = y)"

// restriction GreaterOrEqualThan: // x >= y
//     "All x y #i . GreaterOrEqualThan(x,y)@i ==> y << x | x = y"

restriction LessOrEqualThan: // x <= y
    "All x y #i . LessOrEqualThan(x,y)@i ==> x << y | x = y"

restriction OnlyOneServer:
    "All #i #j . InitServer()@i& InitServer()@j ==> #i = #j"


/* ------- Lemmas ------- */

// TODO

end
