theory ProtonKT
begin

/*
 * Protocol:    Proton Key Transparency
 * Modeler:     Thore Goebel
 * License:     GPL-v3-or-later
 * Date:        September/October 2023
 *
 * Status:      WIP
 */

builtins: hashing, natural-numbers, asymmetric-encryption, signing

heuristic: O "oracle.py"

/*
# ProtonKT model

This model is inspired by the TreeKEM model in [CSF23].

We model Certificate Transparency through persistent facts !CT
that both the server and the adversary can write,
and the clients and the auditor can read.

## Hash tree model

First, recall that <a, b, c> is synactic sugar for <a, <b, c>>.

### The upper tree

roothash = h( <'head', h(ut_0), ..., h(ut_i-1), h(ut_i), h(ut_i+1), ..., h(ut_n), 'tail'> )

This enables inclusion proofs for ut_i,
by providing the list of head hashes, list of tail hashes, and the user tree ut_i.
'head' and 'tail' are helpers to make pattern matching simpler.
TODO: we need to restrict that the location of ut_i is unique!

### The lower user subtrees

A user subtree ut has the following form:

ut = < $label, <%n, val_n>, ..., <%3, val_3>, <%2, 'empty'>, 'rest' >

Some examples:

< $label,   <%rev, val>,                rest     >
< $label, < <%rev, val>,                rest   > >    // same but rewritten
< $label, < <%rev, val>, < <%rev, val>, rest > > >    // two values/revisions

This allows querying to simply return:

ut = <$label, <%n, val_n>, rest>

TODO: we don't really need the %rev in the tree, it is implicit from the ordered list

## Limitations

Intentional modeling simplifications are noted as XXX.
Ideas for future modeling improvements are noted as TODO.

## References

[CSF23]: https://eprint.iacr.org/2022/1130
*/


/* ------- Initialisation Rules ------- */

// TODO: support multiple email addresses per account as tuples of <email, keylist>
//
// Note:
// The first "key" (== the empty key) has revision 2 because we need
// the last_verified_rev to be strictly lower. This ensures that the client
// can do a self-audit where it will see the "key" with revision 2.
// An implementation could simply initialise last_verified_rev = -1.
rule Init_Client:
    let keys = < <%1 %+ %1, 'empty'>, 'rest' >
        last_verified_rev = %1
        unverified_keys = 'empty'
    in
    [ Fr(~id) ]
    --[
        InitClient(~id)
      , StClientGen(~id, %1)
    ]->
    [ !St_Client(~id, %1, $email, keys, last_verified_rev, unverified_keys) ]

// !St_Client is a persistent fact so that it is reusable from the old in case a self-audit fails
restriction UseMaxStClient:
    "All id rev rev_ #t #t_ .
        UseStClient(id, rev)@t & StClientGen(id, rev_)@t_ & #t_ < #t
        ==>
        (rev_ << rev | rev_ = rev)
    "


rule Register_Server_Pk:
    [ Fr(~sk) ] --> [ !LtkServer($server, ~sk), !Pk($server, pk(~sk)), Out(pk(~sk)) ]

rule Reveal_Server_Sk:
    [ !LtkServer(server, sk) ] --[ RevealServerSk() ]-> [ Out(sk) ]

// rule Init_Server:
//     let epoch_id = %1
//         latest_epoch_id = epoch_id
//         roothash = 'empty'
//         chainhash = 'empty'
//         sig = sign(<epoch_id, chainhash>, sk)
//     in
//     [ Fr(~id)
//     , !LtkServer(server, sk) ]
//     --[
//         InitServer(~id)
//       , OnlyOne('server')
//       , IssueEpoch(epoch_id, chainhash)
//       , ServerEpochSign(~id, epoch_id, sig)
//     ]->
//     [ St_Server(~id, sk, latest_epoch_id)
//     , !CT(epoch_id, chainhash, sig)
//     , !SST_Epoch(epoch_id, chainhash, roothash, sig) ]


/* ------- Various Protocol Rules ------- */

// Anyone can insert into CT. Only upong CT audits the signature will be checked.
rule CT_Insert:
    [ In(<epoch_id, chainhash, sig>) ]
    --[
        CtInsertChainhash(epoch_id, chainhash)
    ]->
    [ !CT(epoch_id, chainhash, sig) ]


/* ------- Subprotocol Rules ------- */

#include "publishepoch.spthy"
#include "verifyepoch.spthy"
#include "query.spthy"
#include "selfaudit.spthy"
#include "appendaudit.spthy"


/* ------- Restrictions ------- */

restriction Eq:
    "All a b #i . Eq(a,b)@i ==> a = b"

restriction Neq:
    "All a b #i . Neq(a,b)@i ==> not (a = b)"

// The "not" part isn't needed, but let's make it explicit.
restriction StrictlyGreaterThan: // x > y
    "All x y #i . StrictlyGreaterThan(x,y)@i ==> y << x & not (x = y)"

// restriction StrictlyLessThan: // x < y
//     "All x y #i . StrictlyLessThan(x,y)@i ==> x << y & not (x = y)"

// restriction GreaterOrEqualThan: // x >= y
//     "All x y #i . GreaterOrEqualThan(x,y)@i ==> y << x | x = y"

// restriction LessOrEqualThan: // x <= y
//     "All x y #i . LessOrEqualThan(x,y)@i ==> x << y | x = y"

// restriction OnlyOne:
//     "All a #i #j . OnlyOne(a)@i & OnlyOne(a)@j ==> #i = #j"


/* ------- Lemmas ------- */

// TODO: lemma that there is only one SelfAuditVal for each revision

// lemma If_SelfAudit_LastVerifiedRev_then_all_previous_revs_were_seen[reuse,use_induction]:
//     "All id_c id_sa1 rev highest_rev rev #j .
//           SelfAuditVerifiedLastVerifiedRev(id_c, id_sa1, highest_rev)@j
//         & ( rev << highest_rev | rev = highest_rev )
//     ==>
//         Ex id_sa2 label val #i . SelfAuditVal(id_c, id_sa2, label, val, rev)@i & i < j
//     "

lemma AppendAudit_Update_implies_Insert[reuse,use_induction]:
    "All id label #j.
        AppendUpdate(id, label)@j
        ==>
        Ex #i . AppendInsert(id, label)@i & i < j
    "

// The chainhash used by AppendAudit must be logged
lemma AppendAudit_implies_CT_Insert[reuse]:
    "All id epoch_id roothash chainhash label val rev #j .
        AppendAudit(id, epoch_id, roothash, chainhash, label, val, rev)@j
        // AppendAudit(id, epoch_id, roothash, chainhash)@j
    ==>
        Ex #i .
            CtInsertChainhash(epoch_id, chainhash)@i & i < j
    "

// The chainhash used by QueryVerification must be logged
lemma QueryVerified_implies_CT_Insert[reuse]:
    "All label val rev epoch_id roothash chainhash #j .
        QueryVerified(label, val, rev, epoch_id, roothash, chainhash)@j
    ==>
        Ex #i .
            CtInsertChainhash(epoch_id, chainhash)@i & i < j
    "

// If a <label, val, rev> was QueryVerified, it must be a subterm of the roothash and of the chainhash
lemma QueryVerified_LabelRevValAreSubtermsOfHashes[reuse]:
    "All label val rev ep roothash_q chainhash_q #i .
        QueryVerified(label, val, rev, ep, roothash_q, chainhash_q)@i
    ==>
          label << roothash_q
        &   val << roothash_q
        &   rev << roothash_q

        & label << chainhash_q
        &   val << chainhash_q
        &   rev << chainhash_q
    "

// If a <label, val, rev> was seen by an AppendAudit, it must be a subterm of the roothash and of the chainhash
lemma AppendAudit_LabelRevValAreSubtermsOfHashes[reuse]:
    "All id label val rev ep roothash_a chainhash_a #i .
        AppendAudit(id, ep, roothash_a, chainhash_a, label, val, rev)@i
    ==>
          label << roothash_a
        &   val << roothash_a
        &   rev << roothash_a

        & label << chainhash_a
        &   val << chainhash_a
        &   rev << chainhash_a
    "

// Every AppendAudit() fact either has a direct parent which are subterms, or an AppendInit()
// TODO: we cannot prove this :/
// lemma AppendAudit_HasDirectParent[reuse,use_induction]:
//     "All id label val rev %ep roothash chainhash #j .
//         AppendAudit(id, %ep, roothash, chainhash, label, val, rev)@j
//     ==>
//         (Ex %ep_ roothash_ chainhash_ label_ val_ rev_ #i .
//             AppendAudit(id, %ep_, roothash_, chainhash_, label_, val_, rev_)@i
//             & i < j
//             & ( %ep_ %+ %1 = %ep )
//             & roothash_  << chainhash
//             & chainhash_ << chainhash
//         )
//         | ( Ex #i .
//             AppendInit(id)@i & i < j
//         )
//     "

// lemma AppendAudits_AreSubtermsOfEachOther[reuse,use_induction]:
//     "All id label val rev ep roothash chainhash #j
//         ep_ roothash_ chainhash_ label_ val_ rev_ #i
//         .
//           // for a given AppendAudit()
//           AppendAudit(id, ep, roothash, chainhash, label, val, rev)@j
//           // it holds that in all previous AppendAudit()s
//         & AppendAudit(id, ep_, roothash_, chainhash_, label_, val_, rev_)@i
//         & i < j
//         & ep_ << ep
//     ==>
//           // the values are subterms of the later AppendAudit()
//           roothash_  << chainhash
//         & chainhash_ << chainhash
//     "



// Query and Append Audit imply that an audit loop saw the query's <val,rev>.
// Q ∧ A ==> ∃ AL
lemma one[reuse]:
    "All label val rev ep_q roothash_q chainhash_q #i
        // label_a val_a rev_a are irrelevant for this lemma, they could be anything!
        id_a ep_a roothash_a chainhash_a label_a val_a rev_a #j
        .
          QueryVerified(label, val, rev, ep_q, roothash_q, chainhash_q)@i
        & AppendAudit(id_a, ep_a, roothash_a, chainhash_a, label_a, val_a, rev_a)@j
        & ( ep_q << ep_a | ep_q = ep_a )
        // & roothash_q << chainhash_a // TODO: move into implication?
    ==>
        // then there was some earlier AppendAudit loop (same id_a!) that saw the query's <label, val, rev>
        (
          Ex ep_aa roothash_aa chainhash_aa #k .
               AppendAudit(id_a, ep_aa, roothash_aa, chainhash_aa, label, val, rev)@k
            & (k < j | #k = #j)
        )
        // or equivocation
        | (
            Ex ep_e chainhash chainhash_ #e #e_ .
                CtInsertChainhash(ep_e, chainhash)@e
                & CtInsertChainhash(ep_e, chainhash_)@e_
                & not ( chainhash = chainhash_ )
                & ( ep_e << ep_a | ep_e = ep_a )
        )
    "

// SelfAuditVerified and AppendAudit loop that saw a <val,rev>
// imply that the SelfAudit loop saw the same <val,rev> at some point.
// SA ∧ AL ==> ∃ SAL
lemma two[reuse,use_induction]:
    "All label val rev
        id_c id_sa ep_sa roothash_sa #sa
        id_a ep_a roothash_a chainhash_a #a
        .
          SelfAuditVerified(id_c, id_sa, label, ep_sa, roothash_sa)@sa
        & AppendAudit(id_a, ep_a, roothash_a, chainhash_a, label, val, rev)@a
        & ( ep_sa << ep_a | ep_sa = ep_a )
        // & roothash_sa << chainhash_a // TODO: move into implication?
    ==>
        // then an earlier SelfAudit loop saw the AppendAudit's <val,rev>
        (
            Ex id_sa_ #sa_ .
                SelfAuditVal(id_c, id_sa_, label, val, rev)@sa_
              & sa_ < sa
        )
        // or equivocation
        | (
            Ex ep_e chainhash chainhash_ #e #e_ .
                CtInsertChainhash(ep_e, chainhash)@e
                & CtInsertChainhash(ep_e, chainhash_)@e_
                & not ( chainhash = chainhash_ )
                & ( ep_e << ep_a | ep_e = ep_a )
        )
    "

// If an epoch inserts a value (as seen by append audit)
// then a query AT THE SAME EPOCH must return that value.
lemma SanityCheck_QueryAndAppendAuditorSeeSameValue:
    "All id epoch_id roothash chainhash label val rev #i .
        AppendAudit(id, epoch_id, roothash, chainhash, label, val, rev)@i
    ==>
        not (Ex roothash_ chainhash_ val_ rev_ #j .// val_ rev_ #j .
                  not (val = val_)
                & not (rev = rev_)
                // & QueryVerified(label, val_, rev_)@j
                //   not (chainhash = chainhash_)
                & QueryVerified(label, val_, rev_, epoch_id, roothash_, chainhash_)@j
            )
        // or equivocation
        | (
            Ex ep_e chainhash chainhash_ #e #e_ .
                CtInsertChainhash(ep_e, chainhash)@e
                & CtInsertChainhash(ep_e, chainhash_)@e_
                & not ( chainhash = chainhash_ )
                & ( ep_e << epoch_id | ep_e = epoch_id )
        )
    "


lemma Same_Roothash_Implies_Same_Values[reuse]:
    "All label roothash chainhash
        val_q rev_q ep_q #q
        id_c id_sa1 ep_s #s1
        .
          QueryVerified(label, val_q, rev_q, ep_q, roothash, chainhash)@q
        & SelfAuditVerified(id_c, id_sa1, label, ep_s, roothash)@s1
        // & ( ep_q << ep_s | ep_q = ep_s )
    ==>
        Ex id_sa2 val_s rev_s #s2
            .
              SelfAuditVal(id_c, id_sa2, label, val_s, rev_s)@s2
            & s2 < s1
            & val_q = val_s
            & rev_q = rev_s
    "

lemma RootHashChainQ[reuse]:
    "All label val_q rev_q ep_q roothash_q chainhash_q #q
        id_a ep_a ch_a roothash_a #a.
              QueryVerified(label, val_q, rev_q, ep_q, roothash_q, chainhash_q)@q
            & AppendAuditOld(id_a, ep_a, roothash_a, ch_a)@a
            & ( ep_q << ep_a | ep_q = ep_a )
        ==>
            (roothash_q << ch_a & roothash_a << ch_a)
            // or equivocation
            | (
                Ex ep_e chainhash chainhash_ #e #e_ .
                    CtInsertChainhash(ep_e, chainhash)@e
                    & CtInsertChainhash(ep_e, chainhash_)@e_
                    & not ( chainhash = chainhash_ )
                    & ( ep_e << ep_a | ep_e = ep_a )
            )"

lemma RootHashChainSA[reuse]:
    "All ep_s id_c id_sa1 label roothash_s #s
        id_a ep_a ch_a roothash_a #a.
              SelfAuditVerified(id_c, id_sa1, label, ep_s, roothash_s)@s
            & AppendAuditOld(id_a, ep_a, roothash_a, ch_a)@a
            & ( ep_s << ep_a | ep_s = ep_a )
        ==>
            (roothash_s << ch_a & roothash_a << ch_a)
            // or equivocation
            | (
                Ex ep_e chainhash chainhash_ #e #e_ .
                    CtInsertChainhash(ep_e, chainhash)@e
                    & CtInsertChainhash(ep_e, chainhash_)@e_
                    & not ( chainhash = chainhash_ )
                    & ( ep_e << ep_a | ep_e = ep_a )
            )"

// All Queries BEFORE the SelfAudit should be consistent
// (with the SelfAudit, but also with each other).
// TODO: depends on roothashes/chainhashes
lemma Sec_Consistency:
    "All label
        val_q rev_q ep_q roothash_q chainhash_q #q
        ep_s id_c id_sa1 roothash_sa #sa
        id_a ep_a roothash_a chainhash_a label_irr val_irr rev_irr #a
        .

        QueryVerified(label, val_q, rev_q, ep_q, roothash_q, chainhash_q)@q

          & SelfAuditVerified(id_c, id_sa1, label, ep_s, roothash_sa)@sa
          // only for all queries in epochs up to the SelfAudit
          & ( ep_q << ep_s | ep_q = ep_s )

          // and there was an append-only-audit (for some irrelevant <label,val,rev>)
          & AppendAudit(id_a, ep_a, roothash_a, chainhash_a, label_irr, val_irr, rev_irr)@a
          // for an epoch after the SelfAudit and after the Query
          & ( ep_s << ep_a | ep_s = ep_a )
          // in other words, if there was no AppendAudit then we cannot have any security

        ==>
        // then SOME previous SelfAudit loop of the same client saw this <val,rev> as well
        // (this may be different from the SelfAudit above)
        ( Ex id_sa_ #sa_ .
            SelfAuditVal(id_c, id_sa_, label, val_q, rev_q)@sa_
            & sa_ < sa
        )
        // TODO: and no self-audit saw a different val for the same rev?

        // TODO: and the offending epoch was inserted BEFORE the querying??
        // or equivocation
        | (
            ( Ex ep_e chainhash chainhash_ #e #e_ .
                  CtInsertChainhash(ep_e, chainhash)@e
                & CtInsertChainhash(ep_e, chainhash_)@e_
                & not ( chainhash = chainhash_ )
                & ( ep_e << ep_q | ep_e = ep_q )
            )
        )
    "

end
