/* ------- ProtonVKD.VerifyEpoch ------- */

// This client-side algorithm only checks that an epoch and its roothash
// are correctly logged on a magic bulletin board.
// Keybase uses a blockchain as the bulletin board, Proton uses CT.
//
// All other epoch-related checks (correct long-term epoch-to-epoch chaining, unique epochs,
// append-only-ness, etc.) are delegated to the auditors.
// I.e. this does NOT detect equivocation - a separate audit of CT is needed!
//
// Inputs:
// - the epoch_id of the epoch that should be checked against CT
// - the expected root_hash (we have this from an inclusion proof)
//
// Steps:
// 1. Ask the server for the PrevChainHash. Use that to construct the ChainHash.
// 2. Check that the <EpochId, ChainHash> are logged in CT.
//
// Note that the "PrevChainHash" is provided by the server.
// So it is more of a sanity check, and doesn't give real security.
// UNLESS the clients locally stores a DB of chain hashes (which it currently doesn't?).

// We have no rules that explicitly model the server - the network adversary/Tamarin's contraint solver will do it for us.

// curl 'https://mail.proton.me/api/kt/v1/epochs/300' | jq
// The `id` is important to uniquely link the return value back to the caller.
rule VerifyEpoch[color=#f9d949]:
    let chainhash = h(<chainhash_prev, roothash>)
    in
    [ St_VerifyEpoch_Start(id, %epoch_id, roothash)
    , In(chainhash_prev)
    , !CT(%epoch_id, chainhash, sig)
    // , !Pk($server, pk)
  ]
  --[
      EpochVerified(%epoch_id, chainhash)
      // TODO: model certificate and SCT in detail?
      // TODO: signature verification is not implemented
      // , Eq(verify(sig, <%epoch_id, chainhash>, pk), true)
    ]->
    [ St_VerifyEpoch_End(id) ]
