/*
Third-party auditor rules monitoring the tree for append-only-ness

Without this, a malicious server could change the value at a revision
and later change it back.

The model gradually builds the tree by appending
and **incrementing the epoch_id**.

We can then use the roothash/chainhash in the auditor's action facts
and link it to the roothash/chainhash seen elsewhere.
*/

rule AppendAudit_Init[color=#f09837]:
    let roothash  = h( <'head', 'tail'> )
        chainhash = h(<'basechainhash', roothash>)
    in
    [ Fr(~id)
    , !CT(%1, chainhash, sig) ]
    --[ AppendInit(~id)
      , AppendAudit(~id, %1, roothash, chainhash)
      ]->
    [ St_AppendAuditor(~id, %1, chainhash, roothash) ]

// Inserts an new empty leaf for a new label
rule AppendAudit_Insert[color=#f09837]:
    let roothash_old = h( <head, tail> )

        new_ut = <$label, <%1 %+ %1, 'empty'>, 'rest' >
        roothash_new = h( <head, <h(new_ut), tail>> )
        chainhash_new = h(<chainhash_old, roothash_new>)
    in
    [ St_AppendAuditor(id, %epoch_id, chainhash_old, roothash_old)
    // head + tail let the adversary choose the index at which to insert
    , In(head)
    , In(tail)
    , !CT(%epoch_id %+ %1, chainhash_new, sig)
    ]
    --[
        AppendInsert(id)
      , AppendAuditVal($label, 'empty', %1 %+ %1)
      , AppendAudit(id, %epoch_id %+ %1, roothash_new, chainhash_new)
      // limit that $label is not already in head nor tail (i.e. has a unique position)
      , LabelNotInHeadOrTail($label, head, tail)
    ]->
    [ St_AppendAuditor(id, %epoch_id %+ %1, chainhash_new, roothash_new) ]

restriction LabelNotInHeadOrTail:
    "All label head tail #i .
        LabelNotInHeadOrTail(label, head, tail)@i
        ==>
          not (label << head)
        & not (label << tail)
    "


// Updates the entry for an existing label
rule AppendAudit_Update[color=#f09837]:
    let old_ut = <$label,                        <%rev_old, val_old>, rest>
        roothash_old = h( <head, <h(old_ut), tail>> )

        new_ut = <$label, <%rev_old %+ %1, val>, <%rev_old, val_old>, rest>
        roothash_new = h( <head, <h(new_ut), tail>> )
        chainhash_new = h(<chainhash_old, roothash_new>)
    in
    [ St_AppendAuditor(id, %epoch_id, chainhash_old, roothash_old)
    , In(head)
    , In(tail)
    , In(<$label, val>)
    , !CT(%epoch_id %+ %1, chainhash_new, sig)
    ]
    --[
        AppendUpdate(id)
      , AppendAuditVal($label, val, %rev_old %+ %1)
      , AppendAudit(id, %epoch_id %+ %1, roothash_new, chainhash_new)
    ]->
    [ St_AppendAuditor(id, %epoch_id %+ %1, chainhash_new, roothash_new) ]


/* ------- Executability (sanity check) Lemmas ------- */

lemma Exec_AppendAuditor_Basic:
    exists-trace
    "Ex id roothash chainhash #i #j #k .
          AppendInsert(id)@i
        & AppendUpdate(id)@j
        & AppendAudit(id, %1 %+ %1 %+ %1 %+ %1, roothash, chainhash)@k
        & i < j
        & j < k
    "

// Check that the three core protocols are all executable
// wrt. the same <epoch_id, roothash>.
//
// This takes VERY LONG to verify automatically.
// By instead stepping through manually you can find a trace pretty fast.
lemma Exec_AppendAuditor_and_SelfAudit_and_Query:
    exists-trace
    "Ex epoch_id roothash chainhash
        id_a #i
        label val rev #j
        id_c #k
        id_sa #l #m
        .
            AppendAudit(id_a, epoch_id, roothash, chainhash)@i
        //   & AppendUpdate(id_a)@i
          & QueryVerified(label, val, rev, epoch_id, roothash, chainhash)@j
          & ClientKeyGen(id_c, label, val)@k
          & SelfAuditStart(id_sa)@l
          & SelfAuditVerified(id_c, id_sa, label, epoch_id, roothash)@m
          & k < l
    "
