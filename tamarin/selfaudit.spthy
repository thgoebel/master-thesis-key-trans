/*
This file contains the VKD.KeyHistory and VKD.VerifyHistory subprotocols
(also known as ProtonVKD.SelfAudit).
*/

// The %clientrev is a helper value to ensure that the "latest" !St_Client fact
// is used (because it is a persistent fact).

// Get the "latest" epoch
// TODO: we don't need to check that this is the latest epoch, do we? at least for modeling purposes?
rule SelfAudit_Start[color=#66deb1]:
    [ !St_Client(id, %clientrev, email, keys, %last_verified_rev, unverified_keys)
    , In(%epoch_id)
    , In(roothash_claimed)
    , Fr(~id_sa) ]
    --[
        SelfAuditStart(~id_sa)
      , UseStClient(id, %clientrev)
    ]->
    [ St_VerifyEpoch_Start(~id_sa, %epoch_id, roothash_claimed)
    , St_SelfAudit_1(id, %clientrev, email, keys, %last_verified_rev, unverified_keys, ~id_sa, %epoch_id, roothash_claimed) ]

// Get the key history + verify the inclusion proof towards the roothash
rule SelfAudit_LoopStart[color=#66deb1]:
    let user_tree = <email, key_revisions_claimed>
        roothash_computed = h( < head, h(user_tree), tail > )
    in
    [ St_VerifyEpoch_End(id_sa, chainhash)
    , St_SelfAudit_1(id_c, %clientrev, email, keys, %last_verified_rev, unverified_keys, id_sa, %epoch_id, roothash)
    , In(head)
    , In(tail)
    , In(%highest_rev)
    , In(key_revisions_claimed)
    ]
    --[
        // SelfAudit_Ok(id, email, keys, %epoch_id)
        Eq(roothash_computed, roothash)
      , SelfAudit_LoopStart(id_sa, %highest_rev)
      , SelfAudit_KeyRevisions(id_sa, key_revisions_claimed)
        // TODO: check (== restrict) that $label is not a subterm of head nor tail (== unique leaf)
    ]->
    [ St_SelfAudit_Loop(id_c, id_sa, email, %highest_rev, unverified_keys, key_revisions_claimed)
    , St_Self_Audit_2(id_c, %clientrev, email, keys, %last_verified_rev, id_sa, %epoch_id, roothash, %highest_rev) ]

// Check that the inclusion proof contains all the expected keys at all expected revisions
rule SelfAudit_Loop[color=#66deb1]:
    let curr_rev = %next_rev %+ %1
    in
    [ St_SelfAudit_Loop(id_c, id_sa, email, curr_rev, <val, unverified_keys>, < <curr_rev, val>, proof_rest >) ]
    --[
        SelfAudit_Loop(id_sa, curr_rev)
      , SelfAuditVal(id_c, id_sa, email, val, curr_rev)
    ]->
    [ St_SelfAudit_Loop(id_c, id_sa, email, %next_rev, unverified_keys, proof_rest) ]

// Finish and store the new latest_verified_rev
rule SelfAudit_End[color=#66deb1]:
    // Stop once we have decremented curr_rev/next_rev to equal last_verified_rev.
    // It is important that the proof_rest starts with the last_verified_rev,
    // linking it to our previous audit, else we may miss something.
    //
    // Also recall that the append-auditor ensures that the value at last_verified_rev
    // (and any previous value) haven't changed.
    [ St_SelfAudit_Loop(id_c, id_sa, email, %last_verified_rev, 'empty', < <%last_verified_rev, val_irrelevant>, proof_rest >)
    , St_Self_Audit_2(id_c, %clientrev, email, keys, %last_verified_rev, id_sa, %epoch_id, roothash, %highest_rev) ]
    --[
        SelfAuditVerified(id_c, id_sa, email, %epoch_id, roothash)
      , SelfAuditVerifiedLastVerifiedRev(id_c, id_sa, %highest_rev)
      , StClientGen(id_c, %clientrev %+ %1)
    ]->
    [ !St_Client(id_c, %clientrev %+ %1, email, keys, %highest_rev, 'empty') ]


/* ------- Auxiliary Lemmas ------- */

// Needed for lemma NotTooManyLoops
lemma SelfAuditLoopStarts[reuse,use_induction]:
    all-traces
    "All id_sa rev #j .
        SelfAudit_Loop(id_sa, rev)@j
        ==>
        Ex highest_rev #i . SelfAudit_LoopStart(id_sa, highest_rev)@i & i < j
    "

// Needed for lemma NotTooManyLoops
// Proving this efficiently requires the oracle.py.
lemma SelfAudit_Loop_Unique_Start[reuse]:
    all-traces
    "All id_sa rev rev_ #i #i_ .
          SelfAudit_LoopStart(id_sa, rev)@i
        & SelfAudit_LoopStart(id_sa, rev_)@i_
        ==>
        #i = #i_
    "

lemma NotTooManyLoops[use_induction]:
    all-traces
    "All id_sa highest_rev rev #i #j .
          SelfAudit_LoopStart(id_sa, highest_rev)@i
        & SelfAudit_Loop(id_sa, rev)@j
        ==>
        rev << highest_rev | rev = highest_rev
    "


/* ------- Executability (sanity check) Lemmas ------- */

lemma Executability_SelfAudit_Basic:
    exists-trace
    "Ex id id_sa email epoch_id roothash #i .
        SelfAuditVerified(id, id_sa, email, epoch_id, roothash)@i
    "

lemma Executability_SelfAudit_Two_Keys:
    exists-trace
    "Ex id id_sa email val1 val2 epoch_id roothash #i #j #k .
          ClientKeyGen(id, email, val1)@i
        & ClientKeyGen(id, email, val2)@j
        & SelfAuditVerified(id, id_sa, email, epoch_id, roothash)@k
        & i < k
        & j < k
        & val1 << roothash
        & val2 << roothash
    "

lemma SelfAudit_Finds_All_Keys:
    all-traces
    "All id email val #i .
        ClientKeyGen(id, email, val)@i
        ==>
        Ex id_sa epoch_id roothash #j .
            SelfAuditVerified(id, id_sa, email, epoch_id, roothash)@j
            & i < j
            & val << roothash
    "
